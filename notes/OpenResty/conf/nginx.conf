user  root;
worker_processes  4;
#worker_cpu_affinity 1000 0100 0010 0001;
worker_rlimit_nofile 65535;
worker_priority 0;
env ACCESS_IP;
env ACCESS_PROXY;
env AUTO_REDIRECT_CUSTOMIZE;
env CustomizedKey;


error_log  /usr/local/openresty/nginx/logs/error.log  info;

#pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  65535;
    accept_mutex    on;
    multi_accept    on;
}


http {
    lua_code_cache on;
    server_tokens off;
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 2048m;
    proxy_next_upstream off;

    vhost_traffic_status_zone;
    vhost_traffic_status_filter_by_host on; # 以server_name的形式展示
    vhost_traffic_status_filter on;
    vhost_traffic_status_bypass_stats on; # 不会统计流量页面的数据流量
    vhost_traffic_status_filter_by_set_key $status $server_name; # 计算详细的http状态代码的流量
    #vhost_traffic_status_filter_by_set_key $uri uris::$server_name;

    log_format  main  '$remote_addr $remote_port $server_addr $server_port - [$time_local] "$request" $request_length '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for" conn=$connection conn_req=$connection_requests '
    'request_time=$request_time upstream_connect_time=$upstream_connect_time upstream_header_time=$upstream_header_time '
    'upstream_response_time=$upstream_response_time upstream_addr=$upstream_addr upstream_status=$upstream_status';

    access_log  /usr/local/openresty/nginx/logs/access.log  main;

    geo $whiteiplist  {
        default 1;
        36.110.14.98/32 0;
        
    }

    map $whiteiplist  $limit {
        1 $binary_remote_addr;
        0 "";
    }

    limit_conn_zone $limit zone=ws_conn_limit:16m;
    limit_conn_zone $binary_remote_addr zone=conn_limit:16m;

    limit_req_zone $binary_remote_addr zone=verylowfrequ:20m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=normalfrequ:20m rate=400r/s;
    limit_req_zone $binary_remote_addr zone=highfrequ:20m rate=24000r/m;
    limit_req_zone $binary_remote_addr zone=ultrafrequ:10m rate=2000r/s;
    limit_req_zone $binary_remote_addr zone=toohighfreq:20m rate=5000r/s;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    # 开启gzip
    gzip  off;
    # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
    gzip_min_length 500k;
    # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明
    gzip_comp_level 2;
    # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
    gzip_types application/javascript application/x-javascript text/css text/javascript;

    proxy_cache_path /var/cache0 levels=1:2 keys_zone=page:10m inactive=2h max_size=1g;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    lua_shared_dict xy_private 1m;

    access_by_lua_block {
        local x_forwarded_for = ngx.var["proxy_add_x_forwarded_for"]

        local ACCESS_PROXY = os.getenv("ACCESS_PROXY");

        if ACCESS_PROXY == "PROXY" then
          if x_forwarded_for then
            local ips = {}
            local proxy_ip = ""
            string.gsub(x_forwarded_for , '[^,]+', function(w) table.insert(ips, w) end )
            local len = table.getn(ips)

            if len > 1 then
              proxy_ip = ips[2]
            else
              proxy_ip = ips[1]
            end

            ngx.log(ngx.INFO,"access proxy: from  "..x_forwarded_for.." to "..proxy_ip)
            ngx.req.set_header("X-Real-IP", proxy_ip)
          end
        else
          if x_forwarded_for then
              local x_real_ip = string.match(x_forwarded_for, '([^,]*)')
              if x_real_ip then
                  ngx.req.set_header("X-Real-IP", x_real_ip)
              else
                  ngx.req.set_header("X-Real-IP", ngx.var["remote_addr"])
              end
          end
        end

    }

    init_by_lua_block {

    }

    include conf.d/upstream_conf;
    include conf.d/http_conf;
    include conf.d/internal_nginx_conf;
    include conf.d/ssl_nginx_conf;
}
