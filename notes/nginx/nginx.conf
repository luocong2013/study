# 定义Nginx运行的用户和用户组，默认由nobody账号运行，windows下面可以注释掉
#user  nobody;

# Nginx进程数，建议设置为等于CPU总数心数。可以和worker_cpu_affinity配合
worker_processes  1;

# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 进程文件，windows下可以注释掉
#pid        logs/nginx.pid;

# 一个Nginx进程打开的最多文件描述符（句柄）数目，理论值应该是最多打开文件数（系统的值ulimit -n）与Nginx进程数相除，
# 但是Nginx分配请求并不均匀，所以建议与 ulimit -n 的值保持一致
worker_rlimit_nofile 65535;

# 工作模式与连接数上限
events {
    # 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]
    # epoll 模型是Linux 2.6 以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用 kqueue 模型
    #use epoll;
    # 每个进程允许的最多连接数
    #connections 20000;
    # 单个进程最大连接数（最大连接数=连接数 * 进程数）该值受系统进程最大打开文件数限制，需要使用命令 ulimit -n 查看当前设置
    worker_connections  1024;
}

# 设定http服务器
http {
    # 文件扩展名与文件类型映射表
    # include 是个主模块指令，可以将配置文件拆分并引用，可以减少主配置文件的复杂度
    include       mime.types;
    # 默认文件类型
    default_type  application/octet-stream;
    # 默认编码
    #charset UTF-8;

    # 定义虚拟主机日志的格式
    # 1) $remote_addr 与 $http_x_forwarded_for 用于记录客户端的ip地址
    # 2) $remote_user 用于记录客户端用户名称
    # 3) $time_local 用于记录访问时间与时区
    # 4) $request 用来记录请求的url与http协议
    # 5) $status 用来记录请求状态，成功是 200
    # 6) $body_bytes_sent 用来记录发送给客户端文件主体内容大小
    # 7) $http_referer 用来记录从那个页面链接访问过来的
    # 8) $http_user_agent 用来记录客户端浏览器的相关信息
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # 定义虚拟主机访问日志
    #access_log  logs/access.log  main;

    # 开启高效文件传输模式，sendfile指令指定Nginx是否调用sendfile函数来传输文件，对于普通应用设为 on，如果用来进行下载等应用磁盘I/O重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
    # 注意：如果图片显示不正常把这个改成 off
    sendfile        on;
    # 开启目录列表访问，合适下载服务器，默认关闭
    #autoindex on;
    
    # 防止网络阻塞
    #tcp_nopush     on;

    # 长连接超时时间，单位：秒，默认为0
    #keepalive_timeout  0;
    keepalive_timeout  65;

    # gzip压缩功能设置
    # 开启gzip压缩输出
    gzip  on;
    # 最小压缩文件大小
    gzip_min_length  1k;
    # 压缩缓冲区
    gzip_buffers   4 16k;
    # 压缩版本（默认 1.1，前端如果是squid2.5，请使用1.0）
    gzip_http_version  1.1;
    # 压缩等级
    gzip_comp_level  6;
    # 压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn
    gzip_type  text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    # 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
    gzip_vary  on;
    # 开启限制IP连接数的时候需要使用
    #limit_zone crawler $binary_remote_addr  10m;
    
    # http_proxy 服务全局设置
    client_max_body_size  10m;
    client_body_buffer_size  128k;
    # nginx跟后端服务器连接超时时间(代理连接超时)
    proxy_connect_timeout  75;
    proxy_send_timeout   75;
    # 连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)
    proxy_read_timeout   75;
    # 设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点
    proxy_buffer_size   4k;
    # proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置
    proxy_buffers   4 32k;
    # 高负荷下缓冲大小（proxy_buffers * 2）
    proxy_busy_buffers_size   64k;
    # 当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。
    proxy_temp_file_write_size  64k;
    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;

    # 设定负载均衡后台服务器列表
    upstream mysvr {
        # 内置策略有：轮询（默认）、加权轮询（weight）、ip_hash、fair、url_hash
        # 指定支持的调度算法
        # ip_hash;
        server 192.168.0.100:8080 max_fails=2 fail_timeout=30s ;
        server 192.168.0.101:8080 max_fails=2 fail_timeout=20s ;
        server 192.168.0.102:8080 backup; # 热备
    }

    # 虚拟主机的配置
    server {
        # 监听端口
        listen       80;
        # 域名可以有多个，用空格分开
        server_name  localhost;
        # 服务器端嵌入
        #ssi on;

        # 默认编码
        #charset UTF-8;
        # 定义本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
        
        location /zync {
            proxy_pass http://mysvr;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
        
        # 图片缓存时间设置
        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ {
            expires 10d;
        }
        
        # JS和CSS缓存时间设置
        location ~ .*.(js|css)?$ {
            expires 1h;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    server {
        # 监听443端口（https默认端口）
        listen       443 ssl;
        server_name  localhost;

        # 填写你的证书所在的位置
        ssl_certificate      cert.pem;
        # 填写你的 key所在的位置
        ssl_certificate_key  cert.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        # 按照这个协议配置
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        # 按照这个套件配置
        ssl_ciphers  ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }

}
